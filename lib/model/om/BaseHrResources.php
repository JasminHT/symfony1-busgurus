<?php

/**
 * Base class that represents a row from the 'hr_resources' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/06/10 20:10:01
 *
 * @package    lib.model.om
 */
abstract class BaseHrResources extends BaseObject  implements Persistent {


  const PEER = 'HrResourcesPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        HrResourcesPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the en field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $en;

	/**
	 * The value for the fr field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $fr;

	/**
	 * The value for the title_en field.
	 * @var        string
	 */
	protected $title_en;

	/**
	 * The value for the title_fr field.
	 * @var        string
	 */
	protected $title_fr;

	/**
	 * The value for the pub_type field.
	 * @var        string
	 */
	protected $pub_type;

	/**
	 * The value for the pub_format field.
	 * @var        string
	 */
	protected $pub_format;

	/**
	 * The value for the keywords field.
	 * @var        string
	 */
	protected $keywords;

	/**
	 * The value for the url_en field.
	 * @var        string
	 */
	protected $url_en;

	/**
	 * The value for the url_fr field.
	 * @var        string
	 */
	protected $url_fr;

	/**
	 * The value for the organization_en field.
	 * @var        string
	 */
	protected $organization_en;

	/**
	 * The value for the organization_fr field.
	 * @var        string
	 */
	protected $organization_fr;

	/**
	 * The value for the description_en field.
	 * @var        string
	 */
	protected $description_en;

	/**
	 * The value for the description_fr field.
	 * @var        string
	 */
	protected $description_fr;

	/**
	 * The value for the author field.
	 * @var        string
	 */
	protected $author;

	/**
	 * The value for the publisher field.
	 * @var        string
	 */
	protected $publisher;

	/**
	 * The value for the pub_date field.
	 * @var        string
	 */
	protected $pub_date;

	/**
	 * The value for the pub_place field.
	 * @var        string
	 */
	protected $pub_place;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the series field.
	 * @var        string
	 */
	protected $series;

	/**
	 * The value for the isbn field.
	 * @var        string
	 */
	protected $isbn;

	/**
	 * The value for the thumbnail_en field.
	 * @var        string
	 */
	protected $thumbnail_en;

	/**
	 * The value for the thumbnail_fr field.
	 * @var        string
	 */
	protected $thumbnail_fr;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the date_submitted field.
	 * @var        string
	 */
	protected $date_submitted;

	/**
	 * The value for the approved field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $approved;

	/**
	 * The value for the clicks field.
	 * @var        int
	 */
	protected $clicks;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        array HrResourceCategoriesRelations[] Collection to store aggregation of HrResourceCategoriesRelations objects.
	 */
	protected $collHrResourceCategoriesRelationss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHrResourceCategoriesRelationss.
	 */
	private $lastHrResourceCategoriesRelationsCriteria = null;

	/**
	 * @var        array HrResourceKeywordsRelations[] Collection to store aggregation of HrResourceKeywordsRelations objects.
	 */
	protected $collHrResourceKeywordsRelationss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHrResourceKeywordsRelationss.
	 */
	private $lastHrResourceKeywordsRelationsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseHrResources object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->en = false;
		$this->fr = false;
		$this->approved = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [en] column value.
	 * 
	 * @return     boolean
	 */
	public function getEn()
	{
		return $this->en;
	}

	/**
	 * Get the [fr] column value.
	 * 
	 * @return     boolean
	 */
	public function getFr()
	{
		return $this->fr;
	}

	/**
	 * Get the [title_en] column value.
	 * 
	 * @return     string
	 */
	public function getTitleEn()
	{
		return $this->title_en;
	}

	/**
	 * Get the [title_fr] column value.
	 * 
	 * @return     string
	 */
	public function getTitleFr()
	{
		return $this->title_fr;
	}

	/**
	 * Get the [pub_type] column value.
	 * 
	 * @return     string
	 */
	public function getPubType()
	{
		return $this->pub_type;
	}

	/**
	 * Get the [pub_format] column value.
	 * 
	 * @return     string
	 */
	public function getPubFormat()
	{
		return $this->pub_format;
	}

	/**
	 * Get the [keywords] column value.
	 * 
	 * @return     string
	 */
	public function getKeywords()
	{
		return $this->keywords;
	}

	/**
	 * Get the [url_en] column value.
	 * 
	 * @return     string
	 */
	public function getUrlEn()
	{
		return $this->url_en;
	}

	/**
	 * Get the [url_fr] column value.
	 * 
	 * @return     string
	 */
	public function getUrlFr()
	{
		return $this->url_fr;
	}

	/**
	 * Get the [organization_en] column value.
	 * 
	 * @return     string
	 */
	public function getOrganizationEn()
	{
		return $this->organization_en;
	}

	/**
	 * Get the [organization_fr] column value.
	 * 
	 * @return     string
	 */
	public function getOrganizationFr()
	{
		return $this->organization_fr;
	}

	/**
	 * Get the [description_en] column value.
	 * 
	 * @return     string
	 */
	public function getDescriptionEn()
	{
		return $this->description_en;
	}

	/**
	 * Get the [description_fr] column value.
	 * 
	 * @return     string
	 */
	public function getDescriptionFr()
	{
		return $this->description_fr;
	}

	/**
	 * Get the [author] column value.
	 * 
	 * @return     string
	 */
	public function getAuthor()
	{
		return $this->author;
	}

	/**
	 * Get the [publisher] column value.
	 * 
	 * @return     string
	 */
	public function getPublisher()
	{
		return $this->publisher;
	}

	/**
	 * Get the [optionally formatted] temporal [pub_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPubDate($format = 'Y-m-d H:i:s')
	{
		if ($this->pub_date === null) {
			return null;
		}


		if ($this->pub_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->pub_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->pub_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [pub_place] column value.
	 * 
	 * @return     string
	 */
	public function getPubPlace()
	{
		return $this->pub_place;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [series] column value.
	 * 
	 * @return     string
	 */
	public function getSeries()
	{
		return $this->series;
	}

	/**
	 * Get the [isbn] column value.
	 * 
	 * @return     string
	 */
	public function getIsbn()
	{
		return $this->isbn;
	}

	/**
	 * Get the [thumbnail_en] column value.
	 * 
	 * @return     string
	 */
	public function getThumbnailEn()
	{
		return $this->thumbnail_en;
	}

	/**
	 * Get the [thumbnail_fr] column value.
	 * 
	 * @return     string
	 */
	public function getThumbnailFr()
	{
		return $this->thumbnail_fr;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [optionally formatted] temporal [date_submitted] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateSubmitted($format = 'Y-m-d H:i:s')
	{
		if ($this->date_submitted === null) {
			return null;
		}


		if ($this->date_submitted === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_submitted);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_submitted, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [approved] column value.
	 * 
	 * @return     boolean
	 */
	public function getApproved()
	{
		return $this->approved;
	}

	/**
	 * Get the [clicks] column value.
	 * 
	 * @return     int
	 */
	public function getClicks()
	{
		return $this->clicks;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = HrResourcesPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [en] column.
	 * 
	 * @param      boolean $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setEn($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->en !== $v || $v === false) {
			$this->en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::EN;
		}

		return $this;
	} // setEn()

	/**
	 * Set the value of [fr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setFr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->fr !== $v || $v === false) {
			$this->fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::FR;
		}

		return $this;
	} // setFr()

	/**
	 * Set the value of [title_en] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setTitleEn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title_en !== $v) {
			$this->title_en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::TITLE_EN;
		}

		return $this;
	} // setTitleEn()

	/**
	 * Set the value of [title_fr] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setTitleFr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title_fr !== $v) {
			$this->title_fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::TITLE_FR;
		}

		return $this;
	} // setTitleFr()

	/**
	 * Set the value of [pub_type] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPubType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pub_type !== $v) {
			$this->pub_type = $v;
			$this->modifiedColumns[] = HrResourcesPeer::PUB_TYPE;
		}

		return $this;
	} // setPubType()

	/**
	 * Set the value of [pub_format] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPubFormat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pub_format !== $v) {
			$this->pub_format = $v;
			$this->modifiedColumns[] = HrResourcesPeer::PUB_FORMAT;
		}

		return $this;
	} // setPubFormat()

	/**
	 * Set the value of [keywords] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setKeywords($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->keywords !== $v) {
			$this->keywords = $v;
			$this->modifiedColumns[] = HrResourcesPeer::KEYWORDS;
		}

		return $this;
	} // setKeywords()

	/**
	 * Set the value of [url_en] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setUrlEn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->url_en !== $v) {
			$this->url_en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::URL_EN;
		}

		return $this;
	} // setUrlEn()

	/**
	 * Set the value of [url_fr] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setUrlFr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->url_fr !== $v) {
			$this->url_fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::URL_FR;
		}

		return $this;
	} // setUrlFr()

	/**
	 * Set the value of [organization_en] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setOrganizationEn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->organization_en !== $v) {
			$this->organization_en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::ORGANIZATION_EN;
		}

		return $this;
	} // setOrganizationEn()

	/**
	 * Set the value of [organization_fr] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setOrganizationFr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->organization_fr !== $v) {
			$this->organization_fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::ORGANIZATION_FR;
		}

		return $this;
	} // setOrganizationFr()

	/**
	 * Set the value of [description_en] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setDescriptionEn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description_en !== $v) {
			$this->description_en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::DESCRIPTION_EN;
		}

		return $this;
	} // setDescriptionEn()

	/**
	 * Set the value of [description_fr] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setDescriptionFr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description_fr !== $v) {
			$this->description_fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::DESCRIPTION_FR;
		}

		return $this;
	} // setDescriptionFr()

	/**
	 * Set the value of [author] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setAuthor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->author !== $v) {
			$this->author = $v;
			$this->modifiedColumns[] = HrResourcesPeer::AUTHOR;
		}

		return $this;
	} // setAuthor()

	/**
	 * Set the value of [publisher] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPublisher($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->publisher !== $v) {
			$this->publisher = $v;
			$this->modifiedColumns[] = HrResourcesPeer::PUBLISHER;
		}

		return $this;
	} // setPublisher()

	/**
	 * Sets the value of [pub_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPubDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->pub_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->pub_date !== null && $tmpDt = new DateTime($this->pub_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->pub_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = HrResourcesPeer::PUB_DATE;
			}
		} // if either are not null

		return $this;
	} // setPubDate()

	/**
	 * Set the value of [pub_place] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPubPlace($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pub_place !== $v) {
			$this->pub_place = $v;
			$this->modifiedColumns[] = HrResourcesPeer::PUB_PLACE;
		}

		return $this;
	} // setPubPlace()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = HrResourcesPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [series] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setSeries($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->series !== $v) {
			$this->series = $v;
			$this->modifiedColumns[] = HrResourcesPeer::SERIES;
		}

		return $this;
	} // setSeries()

	/**
	 * Set the value of [isbn] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setIsbn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->isbn !== $v) {
			$this->isbn = $v;
			$this->modifiedColumns[] = HrResourcesPeer::ISBN;
		}

		return $this;
	} // setIsbn()

	/**
	 * Set the value of [thumbnail_en] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setThumbnailEn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumbnail_en !== $v) {
			$this->thumbnail_en = $v;
			$this->modifiedColumns[] = HrResourcesPeer::THUMBNAIL_EN;
		}

		return $this;
	} // setThumbnailEn()

	/**
	 * Set the value of [thumbnail_fr] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setThumbnailFr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumbnail_fr !== $v) {
			$this->thumbnail_fr = $v;
			$this->modifiedColumns[] = HrResourcesPeer::THUMBNAIL_FR;
		}

		return $this;
	} // setThumbnailFr()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = HrResourcesPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = HrResourcesPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = HrResourcesPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = HrResourcesPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Sets the value of [date_submitted] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setDateSubmitted($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_submitted !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_submitted !== null && $tmpDt = new DateTime($this->date_submitted)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_submitted = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = HrResourcesPeer::DATE_SUBMITTED;
			}
		} // if either are not null

		return $this;
	} // setDateSubmitted()

	/**
	 * Set the value of [approved] column.
	 * 
	 * @param      boolean $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setApproved($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->approved !== $v || $v === false) {
			$this->approved = $v;
			$this->modifiedColumns[] = HrResourcesPeer::APPROVED;
		}

		return $this;
	} // setApproved()

	/**
	 * Set the value of [clicks] column.
	 * 
	 * @param      int $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setClicks($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->clicks !== $v) {
			$this->clicks = $v;
			$this->modifiedColumns[] = HrResourcesPeer::CLICKS;
		}

		return $this;
	} // setClicks()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = HrResourcesPeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = HrResourcesPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     HrResources The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = HrResourcesPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(HrResourcesPeer::EN,HrResourcesPeer::FR,HrResourcesPeer::APPROVED))) {
				return false;
			}

			if ($this->en !== false) {
				return false;
			}

			if ($this->fr !== false) {
				return false;
			}

			if ($this->approved !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->en = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->fr = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->title_en = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->title_fr = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->pub_type = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->pub_format = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->keywords = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->url_en = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->url_fr = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->organization_en = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->organization_fr = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->description_en = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->description_fr = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->author = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->publisher = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->pub_date = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->pub_place = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->country = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->series = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->isbn = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->thumbnail_en = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->thumbnail_fr = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->first_name = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->last_name = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->email = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->phone = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->date_submitted = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->approved = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->clicks = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->notes = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->created_at = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->updated_at = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = HrResourcesPeer::NUM_COLUMNS - HrResourcesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating HrResources object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HrResourcesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = HrResourcesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collHrResourceCategoriesRelationss = null;
			$this->lastHrResourceCategoriesRelationsCriteria = null;

			$this->collHrResourceKeywordsRelationss = null;
			$this->lastHrResourceKeywordsRelationsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseHrResources:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HrResourcesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			HrResourcesPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseHrResources:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseHrResources:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(HrResourcesPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(HrResourcesPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HrResourcesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseHrResources:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			HrResourcesPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = HrResourcesPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = HrResourcesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += HrResourcesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collHrResourceCategoriesRelationss !== null) {
				foreach ($this->collHrResourceCategoriesRelationss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHrResourceKeywordsRelationss !== null) {
				foreach ($this->collHrResourceKeywordsRelationss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = HrResourcesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collHrResourceCategoriesRelationss !== null) {
					foreach ($this->collHrResourceCategoriesRelationss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHrResourceKeywordsRelationss !== null) {
					foreach ($this->collHrResourceKeywordsRelationss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = HrResourcesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getEn();
				break;
			case 2:
				return $this->getFr();
				break;
			case 3:
				return $this->getTitleEn();
				break;
			case 4:
				return $this->getTitleFr();
				break;
			case 5:
				return $this->getPubType();
				break;
			case 6:
				return $this->getPubFormat();
				break;
			case 7:
				return $this->getKeywords();
				break;
			case 8:
				return $this->getUrlEn();
				break;
			case 9:
				return $this->getUrlFr();
				break;
			case 10:
				return $this->getOrganizationEn();
				break;
			case 11:
				return $this->getOrganizationFr();
				break;
			case 12:
				return $this->getDescriptionEn();
				break;
			case 13:
				return $this->getDescriptionFr();
				break;
			case 14:
				return $this->getAuthor();
				break;
			case 15:
				return $this->getPublisher();
				break;
			case 16:
				return $this->getPubDate();
				break;
			case 17:
				return $this->getPubPlace();
				break;
			case 18:
				return $this->getCountry();
				break;
			case 19:
				return $this->getSeries();
				break;
			case 20:
				return $this->getIsbn();
				break;
			case 21:
				return $this->getThumbnailEn();
				break;
			case 22:
				return $this->getThumbnailFr();
				break;
			case 23:
				return $this->getFirstName();
				break;
			case 24:
				return $this->getLastName();
				break;
			case 25:
				return $this->getEmail();
				break;
			case 26:
				return $this->getPhone();
				break;
			case 27:
				return $this->getDateSubmitted();
				break;
			case 28:
				return $this->getApproved();
				break;
			case 29:
				return $this->getClicks();
				break;
			case 30:
				return $this->getNotes();
				break;
			case 31:
				return $this->getCreatedAt();
				break;
			case 32:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = HrResourcesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getEn(),
			$keys[2] => $this->getFr(),
			$keys[3] => $this->getTitleEn(),
			$keys[4] => $this->getTitleFr(),
			$keys[5] => $this->getPubType(),
			$keys[6] => $this->getPubFormat(),
			$keys[7] => $this->getKeywords(),
			$keys[8] => $this->getUrlEn(),
			$keys[9] => $this->getUrlFr(),
			$keys[10] => $this->getOrganizationEn(),
			$keys[11] => $this->getOrganizationFr(),
			$keys[12] => $this->getDescriptionEn(),
			$keys[13] => $this->getDescriptionFr(),
			$keys[14] => $this->getAuthor(),
			$keys[15] => $this->getPublisher(),
			$keys[16] => $this->getPubDate(),
			$keys[17] => $this->getPubPlace(),
			$keys[18] => $this->getCountry(),
			$keys[19] => $this->getSeries(),
			$keys[20] => $this->getIsbn(),
			$keys[21] => $this->getThumbnailEn(),
			$keys[22] => $this->getThumbnailFr(),
			$keys[23] => $this->getFirstName(),
			$keys[24] => $this->getLastName(),
			$keys[25] => $this->getEmail(),
			$keys[26] => $this->getPhone(),
			$keys[27] => $this->getDateSubmitted(),
			$keys[28] => $this->getApproved(),
			$keys[29] => $this->getClicks(),
			$keys[30] => $this->getNotes(),
			$keys[31] => $this->getCreatedAt(),
			$keys[32] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = HrResourcesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setEn($value);
				break;
			case 2:
				$this->setFr($value);
				break;
			case 3:
				$this->setTitleEn($value);
				break;
			case 4:
				$this->setTitleFr($value);
				break;
			case 5:
				$this->setPubType($value);
				break;
			case 6:
				$this->setPubFormat($value);
				break;
			case 7:
				$this->setKeywords($value);
				break;
			case 8:
				$this->setUrlEn($value);
				break;
			case 9:
				$this->setUrlFr($value);
				break;
			case 10:
				$this->setOrganizationEn($value);
				break;
			case 11:
				$this->setOrganizationFr($value);
				break;
			case 12:
				$this->setDescriptionEn($value);
				break;
			case 13:
				$this->setDescriptionFr($value);
				break;
			case 14:
				$this->setAuthor($value);
				break;
			case 15:
				$this->setPublisher($value);
				break;
			case 16:
				$this->setPubDate($value);
				break;
			case 17:
				$this->setPubPlace($value);
				break;
			case 18:
				$this->setCountry($value);
				break;
			case 19:
				$this->setSeries($value);
				break;
			case 20:
				$this->setIsbn($value);
				break;
			case 21:
				$this->setThumbnailEn($value);
				break;
			case 22:
				$this->setThumbnailFr($value);
				break;
			case 23:
				$this->setFirstName($value);
				break;
			case 24:
				$this->setLastName($value);
				break;
			case 25:
				$this->setEmail($value);
				break;
			case 26:
				$this->setPhone($value);
				break;
			case 27:
				$this->setDateSubmitted($value);
				break;
			case 28:
				$this->setApproved($value);
				break;
			case 29:
				$this->setClicks($value);
				break;
			case 30:
				$this->setNotes($value);
				break;
			case 31:
				$this->setCreatedAt($value);
				break;
			case 32:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = HrResourcesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setEn($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFr($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTitleEn($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTitleFr($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPubType($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPubFormat($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setKeywords($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUrlEn($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUrlFr($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOrganizationEn($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOrganizationFr($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDescriptionEn($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDescriptionFr($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setAuthor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPublisher($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPubDate($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPubPlace($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCountry($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setSeries($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setIsbn($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setThumbnailEn($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setThumbnailFr($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setFirstName($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setLastName($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setEmail($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPhone($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setDateSubmitted($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setApproved($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setClicks($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setNotes($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCreatedAt($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setUpdatedAt($arr[$keys[32]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);

		if ($this->isColumnModified(HrResourcesPeer::ID)) $criteria->add(HrResourcesPeer::ID, $this->id);
		if ($this->isColumnModified(HrResourcesPeer::EN)) $criteria->add(HrResourcesPeer::EN, $this->en);
		if ($this->isColumnModified(HrResourcesPeer::FR)) $criteria->add(HrResourcesPeer::FR, $this->fr);
		if ($this->isColumnModified(HrResourcesPeer::TITLE_EN)) $criteria->add(HrResourcesPeer::TITLE_EN, $this->title_en);
		if ($this->isColumnModified(HrResourcesPeer::TITLE_FR)) $criteria->add(HrResourcesPeer::TITLE_FR, $this->title_fr);
		if ($this->isColumnModified(HrResourcesPeer::PUB_TYPE)) $criteria->add(HrResourcesPeer::PUB_TYPE, $this->pub_type);
		if ($this->isColumnModified(HrResourcesPeer::PUB_FORMAT)) $criteria->add(HrResourcesPeer::PUB_FORMAT, $this->pub_format);
		if ($this->isColumnModified(HrResourcesPeer::KEYWORDS)) $criteria->add(HrResourcesPeer::KEYWORDS, $this->keywords);
		if ($this->isColumnModified(HrResourcesPeer::URL_EN)) $criteria->add(HrResourcesPeer::URL_EN, $this->url_en);
		if ($this->isColumnModified(HrResourcesPeer::URL_FR)) $criteria->add(HrResourcesPeer::URL_FR, $this->url_fr);
		if ($this->isColumnModified(HrResourcesPeer::ORGANIZATION_EN)) $criteria->add(HrResourcesPeer::ORGANIZATION_EN, $this->organization_en);
		if ($this->isColumnModified(HrResourcesPeer::ORGANIZATION_FR)) $criteria->add(HrResourcesPeer::ORGANIZATION_FR, $this->organization_fr);
		if ($this->isColumnModified(HrResourcesPeer::DESCRIPTION_EN)) $criteria->add(HrResourcesPeer::DESCRIPTION_EN, $this->description_en);
		if ($this->isColumnModified(HrResourcesPeer::DESCRIPTION_FR)) $criteria->add(HrResourcesPeer::DESCRIPTION_FR, $this->description_fr);
		if ($this->isColumnModified(HrResourcesPeer::AUTHOR)) $criteria->add(HrResourcesPeer::AUTHOR, $this->author);
		if ($this->isColumnModified(HrResourcesPeer::PUBLISHER)) $criteria->add(HrResourcesPeer::PUBLISHER, $this->publisher);
		if ($this->isColumnModified(HrResourcesPeer::PUB_DATE)) $criteria->add(HrResourcesPeer::PUB_DATE, $this->pub_date);
		if ($this->isColumnModified(HrResourcesPeer::PUB_PLACE)) $criteria->add(HrResourcesPeer::PUB_PLACE, $this->pub_place);
		if ($this->isColumnModified(HrResourcesPeer::COUNTRY)) $criteria->add(HrResourcesPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(HrResourcesPeer::SERIES)) $criteria->add(HrResourcesPeer::SERIES, $this->series);
		if ($this->isColumnModified(HrResourcesPeer::ISBN)) $criteria->add(HrResourcesPeer::ISBN, $this->isbn);
		if ($this->isColumnModified(HrResourcesPeer::THUMBNAIL_EN)) $criteria->add(HrResourcesPeer::THUMBNAIL_EN, $this->thumbnail_en);
		if ($this->isColumnModified(HrResourcesPeer::THUMBNAIL_FR)) $criteria->add(HrResourcesPeer::THUMBNAIL_FR, $this->thumbnail_fr);
		if ($this->isColumnModified(HrResourcesPeer::FIRST_NAME)) $criteria->add(HrResourcesPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(HrResourcesPeer::LAST_NAME)) $criteria->add(HrResourcesPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(HrResourcesPeer::EMAIL)) $criteria->add(HrResourcesPeer::EMAIL, $this->email);
		if ($this->isColumnModified(HrResourcesPeer::PHONE)) $criteria->add(HrResourcesPeer::PHONE, $this->phone);
		if ($this->isColumnModified(HrResourcesPeer::DATE_SUBMITTED)) $criteria->add(HrResourcesPeer::DATE_SUBMITTED, $this->date_submitted);
		if ($this->isColumnModified(HrResourcesPeer::APPROVED)) $criteria->add(HrResourcesPeer::APPROVED, $this->approved);
		if ($this->isColumnModified(HrResourcesPeer::CLICKS)) $criteria->add(HrResourcesPeer::CLICKS, $this->clicks);
		if ($this->isColumnModified(HrResourcesPeer::NOTES)) $criteria->add(HrResourcesPeer::NOTES, $this->notes);
		if ($this->isColumnModified(HrResourcesPeer::CREATED_AT)) $criteria->add(HrResourcesPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(HrResourcesPeer::UPDATED_AT)) $criteria->add(HrResourcesPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);

		$criteria->add(HrResourcesPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of HrResources (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setEn($this->en);

		$copyObj->setFr($this->fr);

		$copyObj->setTitleEn($this->title_en);

		$copyObj->setTitleFr($this->title_fr);

		$copyObj->setPubType($this->pub_type);

		$copyObj->setPubFormat($this->pub_format);

		$copyObj->setKeywords($this->keywords);

		$copyObj->setUrlEn($this->url_en);

		$copyObj->setUrlFr($this->url_fr);

		$copyObj->setOrganizationEn($this->organization_en);

		$copyObj->setOrganizationFr($this->organization_fr);

		$copyObj->setDescriptionEn($this->description_en);

		$copyObj->setDescriptionFr($this->description_fr);

		$copyObj->setAuthor($this->author);

		$copyObj->setPublisher($this->publisher);

		$copyObj->setPubDate($this->pub_date);

		$copyObj->setPubPlace($this->pub_place);

		$copyObj->setCountry($this->country);

		$copyObj->setSeries($this->series);

		$copyObj->setIsbn($this->isbn);

		$copyObj->setThumbnailEn($this->thumbnail_en);

		$copyObj->setThumbnailFr($this->thumbnail_fr);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setEmail($this->email);

		$copyObj->setPhone($this->phone);

		$copyObj->setDateSubmitted($this->date_submitted);

		$copyObj->setApproved($this->approved);

		$copyObj->setClicks($this->clicks);

		$copyObj->setNotes($this->notes);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getHrResourceCategoriesRelationss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHrResourceCategoriesRelations($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHrResourceKeywordsRelationss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHrResourceKeywordsRelations($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     HrResources Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     HrResourcesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new HrResourcesPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collHrResourceCategoriesRelationss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHrResourceCategoriesRelationss()
	 */
	public function clearHrResourceCategoriesRelationss()
	{
		$this->collHrResourceCategoriesRelationss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHrResourceCategoriesRelationss collection (array).
	 *
	 * By default this just sets the collHrResourceCategoriesRelationss collection to an empty array (like clearcollHrResourceCategoriesRelationss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHrResourceCategoriesRelationss()
	{
		$this->collHrResourceCategoriesRelationss = array();
	}

	/**
	 * Gets an array of HrResourceCategoriesRelations objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this HrResources has previously been saved, it will retrieve
	 * related HrResourceCategoriesRelationss from storage. If this HrResources is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array HrResourceCategoriesRelations[]
	 * @throws     PropelException
	 */
	public function getHrResourceCategoriesRelationss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHrResourceCategoriesRelationss === null) {
			if ($this->isNew()) {
			   $this->collHrResourceCategoriesRelationss = array();
			} else {

				$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

				HrResourceCategoriesRelationsPeer::addSelectColumns($criteria);
				$this->collHrResourceCategoriesRelationss = HrResourceCategoriesRelationsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

				HrResourceCategoriesRelationsPeer::addSelectColumns($criteria);
				if (!isset($this->lastHrResourceCategoriesRelationsCriteria) || !$this->lastHrResourceCategoriesRelationsCriteria->equals($criteria)) {
					$this->collHrResourceCategoriesRelationss = HrResourceCategoriesRelationsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHrResourceCategoriesRelationsCriteria = $criteria;
		return $this->collHrResourceCategoriesRelationss;
	}

	/**
	 * Returns the number of related HrResourceCategoriesRelations objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related HrResourceCategoriesRelations objects.
	 * @throws     PropelException
	 */
	public function countHrResourceCategoriesRelationss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHrResourceCategoriesRelationss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

				$count = HrResourceCategoriesRelationsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

				if (!isset($this->lastHrResourceCategoriesRelationsCriteria) || !$this->lastHrResourceCategoriesRelationsCriteria->equals($criteria)) {
					$count = HrResourceCategoriesRelationsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collHrResourceCategoriesRelationss);
				}
			} else {
				$count = count($this->collHrResourceCategoriesRelationss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a HrResourceCategoriesRelations object to this object
	 * through the HrResourceCategoriesRelations foreign key attribute.
	 *
	 * @param      HrResourceCategoriesRelations $l HrResourceCategoriesRelations
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHrResourceCategoriesRelations(HrResourceCategoriesRelations $l)
	{
		if ($this->collHrResourceCategoriesRelationss === null) {
			$this->initHrResourceCategoriesRelationss();
		}
		if (!in_array($l, $this->collHrResourceCategoriesRelationss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHrResourceCategoriesRelationss, $l);
			$l->setHrResources($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this HrResources is new, it will return
	 * an empty collection; or if this HrResources has previously
	 * been saved, it will retrieve related HrResourceCategoriesRelationss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in HrResources.
	 */
	public function getHrResourceCategoriesRelationssJoinHrCategories($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHrResourceCategoriesRelationss === null) {
			if ($this->isNew()) {
				$this->collHrResourceCategoriesRelationss = array();
			} else {

				$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

				$this->collHrResourceCategoriesRelationss = HrResourceCategoriesRelationsPeer::doSelectJoinHrCategories($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HrResourceCategoriesRelationsPeer::HR_RESOURCES_ID, $this->id);

			if (!isset($this->lastHrResourceCategoriesRelationsCriteria) || !$this->lastHrResourceCategoriesRelationsCriteria->equals($criteria)) {
				$this->collHrResourceCategoriesRelationss = HrResourceCategoriesRelationsPeer::doSelectJoinHrCategories($criteria, $con, $join_behavior);
			}
		}
		$this->lastHrResourceCategoriesRelationsCriteria = $criteria;

		return $this->collHrResourceCategoriesRelationss;
	}

	/**
	 * Clears out the collHrResourceKeywordsRelationss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHrResourceKeywordsRelationss()
	 */
	public function clearHrResourceKeywordsRelationss()
	{
		$this->collHrResourceKeywordsRelationss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHrResourceKeywordsRelationss collection (array).
	 *
	 * By default this just sets the collHrResourceKeywordsRelationss collection to an empty array (like clearcollHrResourceKeywordsRelationss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHrResourceKeywordsRelationss()
	{
		$this->collHrResourceKeywordsRelationss = array();
	}

	/**
	 * Gets an array of HrResourceKeywordsRelations objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this HrResources has previously been saved, it will retrieve
	 * related HrResourceKeywordsRelationss from storage. If this HrResources is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array HrResourceKeywordsRelations[]
	 * @throws     PropelException
	 */
	public function getHrResourceKeywordsRelationss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHrResourceKeywordsRelationss === null) {
			if ($this->isNew()) {
			   $this->collHrResourceKeywordsRelationss = array();
			} else {

				$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

				HrResourceKeywordsRelationsPeer::addSelectColumns($criteria);
				$this->collHrResourceKeywordsRelationss = HrResourceKeywordsRelationsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

				HrResourceKeywordsRelationsPeer::addSelectColumns($criteria);
				if (!isset($this->lastHrResourceKeywordsRelationsCriteria) || !$this->lastHrResourceKeywordsRelationsCriteria->equals($criteria)) {
					$this->collHrResourceKeywordsRelationss = HrResourceKeywordsRelationsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHrResourceKeywordsRelationsCriteria = $criteria;
		return $this->collHrResourceKeywordsRelationss;
	}

	/**
	 * Returns the number of related HrResourceKeywordsRelations objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related HrResourceKeywordsRelations objects.
	 * @throws     PropelException
	 */
	public function countHrResourceKeywordsRelationss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHrResourceKeywordsRelationss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

				$count = HrResourceKeywordsRelationsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

				if (!isset($this->lastHrResourceKeywordsRelationsCriteria) || !$this->lastHrResourceKeywordsRelationsCriteria->equals($criteria)) {
					$count = HrResourceKeywordsRelationsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collHrResourceKeywordsRelationss);
				}
			} else {
				$count = count($this->collHrResourceKeywordsRelationss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a HrResourceKeywordsRelations object to this object
	 * through the HrResourceKeywordsRelations foreign key attribute.
	 *
	 * @param      HrResourceKeywordsRelations $l HrResourceKeywordsRelations
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHrResourceKeywordsRelations(HrResourceKeywordsRelations $l)
	{
		if ($this->collHrResourceKeywordsRelationss === null) {
			$this->initHrResourceKeywordsRelationss();
		}
		if (!in_array($l, $this->collHrResourceKeywordsRelationss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHrResourceKeywordsRelationss, $l);
			$l->setHrResources($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this HrResources is new, it will return
	 * an empty collection; or if this HrResources has previously
	 * been saved, it will retrieve related HrResourceKeywordsRelationss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in HrResources.
	 */
	public function getHrResourceKeywordsRelationssJoinHrKeywords($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(HrResourcesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHrResourceKeywordsRelationss === null) {
			if ($this->isNew()) {
				$this->collHrResourceKeywordsRelationss = array();
			} else {

				$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

				$this->collHrResourceKeywordsRelationss = HrResourceKeywordsRelationsPeer::doSelectJoinHrKeywords($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HrResourceKeywordsRelationsPeer::HR_RESOURCES_ID, $this->id);

			if (!isset($this->lastHrResourceKeywordsRelationsCriteria) || !$this->lastHrResourceKeywordsRelationsCriteria->equals($criteria)) {
				$this->collHrResourceKeywordsRelationss = HrResourceKeywordsRelationsPeer::doSelectJoinHrKeywords($criteria, $con, $join_behavior);
			}
		}
		$this->lastHrResourceKeywordsRelationsCriteria = $criteria;

		return $this->collHrResourceKeywordsRelationss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collHrResourceCategoriesRelationss) {
				foreach ((array) $this->collHrResourceCategoriesRelationss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHrResourceKeywordsRelationss) {
				foreach ((array) $this->collHrResourceKeywordsRelationss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collHrResourceCategoriesRelationss = null;
		$this->collHrResourceKeywordsRelationss = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseHrResources:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseHrResources::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseHrResources
